// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_db_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultstb_user_infoImpl();
void InitDefaultstb_user_info();
void InitDefaultstb_user_info_fileImpl();
void InitDefaultstb_user_info_file();
inline void InitDefaults() {
  InitDefaultstb_user_info();
  InitDefaultstb_user_info_file();
}
}  // namespace protobuf_db_2eproto
class tb_user_info;
class tb_user_infoDefaultTypeInternal;
extern tb_user_infoDefaultTypeInternal _tb_user_info_default_instance_;
class tb_user_info_file;
class tb_user_info_fileDefaultTypeInternal;
extern tb_user_info_fileDefaultTypeInternal _tb_user_info_file_default_instance_;

// ===================================================================

class tb_user_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tb_user_info) */ {
 public:
  tb_user_info();
  virtual ~tb_user_info();

  tb_user_info(const tb_user_info& from);

  inline tb_user_info& operator=(const tb_user_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tb_user_info(tb_user_info&& from) noexcept
    : tb_user_info() {
    *this = ::std::move(from);
  }

  inline tb_user_info& operator=(tb_user_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_user_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tb_user_info* internal_default_instance() {
    return reinterpret_cast<const tb_user_info*>(
               &_tb_user_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(tb_user_info* other);
  friend void swap(tb_user_info& a, tb_user_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tb_user_info* New() const PROTOBUF_FINAL { return New(NULL); }

  tb_user_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tb_user_info& from);
  void MergeFrom(const tb_user_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tb_user_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accout = 3;
  bool has_accout() const;
  void clear_accout();
  static const int kAccoutFieldNumber = 3;
  const ::std::string& accout() const;
  void set_accout(const ::std::string& value);
  #if LANG_CXX11
  void set_accout(::std::string&& value);
  #endif
  void set_accout(const char* value);
  void set_accout(const char* value, size_t size);
  ::std::string* mutable_accout();
  ::std::string* release_accout();
  void set_allocated_accout(::std::string* accout);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string accoutName = 5;
  bool has_accoutname() const;
  void clear_accoutname();
  static const int kAccoutNameFieldNumber = 5;
  const ::std::string& accoutname() const;
  void set_accoutname(const ::std::string& value);
  #if LANG_CXX11
  void set_accoutname(::std::string&& value);
  #endif
  void set_accoutname(const char* value);
  void set_accoutname(const char* value, size_t size);
  ::std::string* mutable_accoutname();
  ::std::string* release_accoutname();
  void set_allocated_accoutname(::std::string* accoutname);

  // optional string email = 6;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 6;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string phoneNum = 7;
  bool has_phonenum() const;
  void clear_phonenum();
  static const int kPhoneNumFieldNumber = 7;
  const ::std::string& phonenum() const;
  void set_phonenum(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenum(::std::string&& value);
  #endif
  void set_phonenum(const char* value);
  void set_phonenum(const char* value, size_t size);
  ::std::string* mutable_phonenum();
  ::std::string* release_phonenum();
  void set_allocated_phonenum(::std::string* phonenum);

  // optional string registerTime = 9;
  bool has_registertime() const;
  void clear_registertime();
  static const int kRegisterTimeFieldNumber = 9;
  const ::std::string& registertime() const;
  void set_registertime(const ::std::string& value);
  #if LANG_CXX11
  void set_registertime(::std::string&& value);
  #endif
  void set_registertime(const char* value);
  void set_registertime(const char* value, size_t size);
  ::std::string* mutable_registertime();
  ::std::string* release_registertime();
  void set_allocated_registertime(::std::string* registertime);

  // optional string registerAddr = 10;
  bool has_registeraddr() const;
  void clear_registeraddr();
  static const int kRegisterAddrFieldNumber = 10;
  const ::std::string& registeraddr() const;
  void set_registeraddr(const ::std::string& value);
  #if LANG_CXX11
  void set_registeraddr(::std::string&& value);
  #endif
  void set_registeraddr(const char* value);
  void set_registeraddr(const char* value, size_t size);
  ::std::string* mutable_registeraddr();
  ::std::string* release_registeraddr();
  void set_allocated_registeraddr(::std::string* registeraddr);

  // optional string lastLoginOutTime = 13;
  bool has_lastloginouttime() const;
  void clear_lastloginouttime();
  static const int kLastLoginOutTimeFieldNumber = 13;
  const ::std::string& lastloginouttime() const;
  void set_lastloginouttime(const ::std::string& value);
  #if LANG_CXX11
  void set_lastloginouttime(::std::string&& value);
  #endif
  void set_lastloginouttime(const char* value);
  void set_lastloginouttime(const char* value, size_t size);
  ::std::string* mutable_lastloginouttime();
  ::std::string* release_lastloginouttime();
  void set_allocated_lastloginouttime(::std::string* lastloginouttime);

  // optional string selfInviteKey = 14;
  bool has_selfinvitekey() const;
  void clear_selfinvitekey();
  static const int kSelfInviteKeyFieldNumber = 14;
  const ::std::string& selfinvitekey() const;
  void set_selfinvitekey(const ::std::string& value);
  #if LANG_CXX11
  void set_selfinvitekey(::std::string&& value);
  #endif
  void set_selfinvitekey(const char* value);
  void set_selfinvitekey(const char* value, size_t size);
  ::std::string* mutable_selfinvitekey();
  ::std::string* release_selfinvitekey();
  void set_allocated_selfinvitekey(::std::string* selfinvitekey);

  // optional uint32 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 userid() const;
  void set_userid(::google::protobuf::uint32 value);

  // optional uint32 userEx = 2;
  bool has_userex() const;
  void clear_userex();
  static const int kUserExFieldNumber = 2;
  ::google::protobuf::uint32 userex() const;
  void set_userex(::google::protobuf::uint32 value);

  // optional uint32 userType = 8;
  bool has_usertype() const;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 8;
  ::google::protobuf::uint32 usertype() const;
  void set_usertype(::google::protobuf::uint32 value);

  // optional bool openDeviceLock = 11;
  bool has_opendevicelock() const;
  void clear_opendevicelock();
  static const int kOpenDeviceLockFieldNumber = 11;
  bool opendevicelock() const;
  void set_opendevicelock(bool value);

  // optional bool onLone = 12;
  bool has_onlone() const;
  void clear_onlone();
  static const int kOnLoneFieldNumber = 12;
  bool onlone() const;
  void set_onlone(bool value);

  // @@protoc_insertion_point(class_scope:tb_user_info)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_userex();
  void clear_has_userex();
  void set_has_accout();
  void clear_has_accout();
  void set_has_password();
  void clear_has_password();
  void set_has_accoutname();
  void clear_has_accoutname();
  void set_has_email();
  void clear_has_email();
  void set_has_phonenum();
  void clear_has_phonenum();
  void set_has_usertype();
  void clear_has_usertype();
  void set_has_registertime();
  void clear_has_registertime();
  void set_has_registeraddr();
  void clear_has_registeraddr();
  void set_has_opendevicelock();
  void clear_has_opendevicelock();
  void set_has_onlone();
  void clear_has_onlone();
  void set_has_lastloginouttime();
  void clear_has_lastloginouttime();
  void set_has_selfinvitekey();
  void clear_has_selfinvitekey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr accout_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr accoutname_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr phonenum_;
  ::google::protobuf::internal::ArenaStringPtr registertime_;
  ::google::protobuf::internal::ArenaStringPtr registeraddr_;
  ::google::protobuf::internal::ArenaStringPtr lastloginouttime_;
  ::google::protobuf::internal::ArenaStringPtr selfinvitekey_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 userex_;
  ::google::protobuf::uint32 usertype_;
  bool opendevicelock_;
  bool onlone_;
  friend struct ::protobuf_db_2eproto::TableStruct;
  friend void ::protobuf_db_2eproto::InitDefaultstb_user_infoImpl();
};
// -------------------------------------------------------------------

class tb_user_info_file : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tb_user_info_file) */ {
 public:
  tb_user_info_file();
  virtual ~tb_user_info_file();

  tb_user_info_file(const tb_user_info_file& from);

  inline tb_user_info_file& operator=(const tb_user_info_file& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tb_user_info_file(tb_user_info_file&& from) noexcept
    : tb_user_info_file() {
    *this = ::std::move(from);
  }

  inline tb_user_info_file& operator=(tb_user_info_file&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_user_info_file& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tb_user_info_file* internal_default_instance() {
    return reinterpret_cast<const tb_user_info_file*>(
               &_tb_user_info_file_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(tb_user_info_file* other);
  friend void swap(tb_user_info_file& a, tb_user_info_file& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tb_user_info_file* New() const PROTOBUF_FINAL { return New(NULL); }

  tb_user_info_file* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tb_user_info_file& from);
  void MergeFrom(const tb_user_info_file& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tb_user_info_file* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tb_user_info uinfo = 1;
  int uinfo_size() const;
  void clear_uinfo();
  static const int kUinfoFieldNumber = 1;
  const ::tb_user_info& uinfo(int index) const;
  ::tb_user_info* mutable_uinfo(int index);
  ::tb_user_info* add_uinfo();
  ::google::protobuf::RepeatedPtrField< ::tb_user_info >*
      mutable_uinfo();
  const ::google::protobuf::RepeatedPtrField< ::tb_user_info >&
      uinfo() const;

  // @@protoc_insertion_point(class_scope:tb_user_info_file)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tb_user_info > uinfo_;
  friend struct ::protobuf_db_2eproto::TableStruct;
  friend void ::protobuf_db_2eproto::InitDefaultstb_user_info_fileImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tb_user_info

// optional uint32 userId = 1;
inline bool tb_user_info::has_userid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tb_user_info::set_has_userid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tb_user_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tb_user_info::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 tb_user_info::userid() const {
  // @@protoc_insertion_point(field_get:tb_user_info.userId)
  return userid_;
}
inline void tb_user_info::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:tb_user_info.userId)
}

// optional uint32 userEx = 2;
inline bool tb_user_info::has_userex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tb_user_info::set_has_userex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tb_user_info::clear_has_userex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tb_user_info::clear_userex() {
  userex_ = 0u;
  clear_has_userex();
}
inline ::google::protobuf::uint32 tb_user_info::userex() const {
  // @@protoc_insertion_point(field_get:tb_user_info.userEx)
  return userex_;
}
inline void tb_user_info::set_userex(::google::protobuf::uint32 value) {
  set_has_userex();
  userex_ = value;
  // @@protoc_insertion_point(field_set:tb_user_info.userEx)
}

// optional string accout = 3;
inline bool tb_user_info::has_accout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_user_info::set_has_accout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_user_info::clear_has_accout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_user_info::clear_accout() {
  accout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accout();
}
inline const ::std::string& tb_user_info::accout() const {
  // @@protoc_insertion_point(field_get:tb_user_info.accout)
  return accout_.GetNoArena();
}
inline void tb_user_info::set_accout(const ::std::string& value) {
  set_has_accout();
  accout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.accout)
}
#if LANG_CXX11
inline void tb_user_info::set_accout(::std::string&& value) {
  set_has_accout();
  accout_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.accout)
}
#endif
inline void tb_user_info::set_accout(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accout();
  accout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.accout)
}
inline void tb_user_info::set_accout(const char* value, size_t size) {
  set_has_accout();
  accout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.accout)
}
inline ::std::string* tb_user_info::mutable_accout() {
  set_has_accout();
  // @@protoc_insertion_point(field_mutable:tb_user_info.accout)
  return accout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_accout() {
  // @@protoc_insertion_point(field_release:tb_user_info.accout)
  clear_has_accout();
  return accout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_accout(::std::string* accout) {
  if (accout != NULL) {
    set_has_accout();
  } else {
    clear_has_accout();
  }
  accout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accout);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.accout)
}

// optional string password = 4;
inline bool tb_user_info::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_user_info::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_user_info::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_user_info::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& tb_user_info::password() const {
  // @@protoc_insertion_point(field_get:tb_user_info.password)
  return password_.GetNoArena();
}
inline void tb_user_info::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.password)
}
#if LANG_CXX11
inline void tb_user_info::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.password)
}
#endif
inline void tb_user_info::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.password)
}
inline void tb_user_info::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.password)
}
inline ::std::string* tb_user_info::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:tb_user_info.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_password() {
  // @@protoc_insertion_point(field_release:tb_user_info.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.password)
}

// optional string accoutName = 5;
inline bool tb_user_info::has_accoutname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_user_info::set_has_accoutname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_user_info::clear_has_accoutname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_user_info::clear_accoutname() {
  accoutname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accoutname();
}
inline const ::std::string& tb_user_info::accoutname() const {
  // @@protoc_insertion_point(field_get:tb_user_info.accoutName)
  return accoutname_.GetNoArena();
}
inline void tb_user_info::set_accoutname(const ::std::string& value) {
  set_has_accoutname();
  accoutname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.accoutName)
}
#if LANG_CXX11
inline void tb_user_info::set_accoutname(::std::string&& value) {
  set_has_accoutname();
  accoutname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.accoutName)
}
#endif
inline void tb_user_info::set_accoutname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accoutname();
  accoutname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.accoutName)
}
inline void tb_user_info::set_accoutname(const char* value, size_t size) {
  set_has_accoutname();
  accoutname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.accoutName)
}
inline ::std::string* tb_user_info::mutable_accoutname() {
  set_has_accoutname();
  // @@protoc_insertion_point(field_mutable:tb_user_info.accoutName)
  return accoutname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_accoutname() {
  // @@protoc_insertion_point(field_release:tb_user_info.accoutName)
  clear_has_accoutname();
  return accoutname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_accoutname(::std::string* accoutname) {
  if (accoutname != NULL) {
    set_has_accoutname();
  } else {
    clear_has_accoutname();
  }
  accoutname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accoutname);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.accoutName)
}

// optional string email = 6;
inline bool tb_user_info::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_user_info::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_user_info::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_user_info::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& tb_user_info::email() const {
  // @@protoc_insertion_point(field_get:tb_user_info.email)
  return email_.GetNoArena();
}
inline void tb_user_info::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.email)
}
#if LANG_CXX11
inline void tb_user_info::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.email)
}
#endif
inline void tb_user_info::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.email)
}
inline void tb_user_info::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.email)
}
inline ::std::string* tb_user_info::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:tb_user_info.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_email() {
  // @@protoc_insertion_point(field_release:tb_user_info.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.email)
}

// optional string phoneNum = 7;
inline bool tb_user_info::has_phonenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_user_info::set_has_phonenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_user_info::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_user_info::clear_phonenum() {
  phonenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenum();
}
inline const ::std::string& tb_user_info::phonenum() const {
  // @@protoc_insertion_point(field_get:tb_user_info.phoneNum)
  return phonenum_.GetNoArena();
}
inline void tb_user_info::set_phonenum(const ::std::string& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.phoneNum)
}
#if LANG_CXX11
inline void tb_user_info::set_phonenum(::std::string&& value) {
  set_has_phonenum();
  phonenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.phoneNum)
}
#endif
inline void tb_user_info::set_phonenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.phoneNum)
}
inline void tb_user_info::set_phonenum(const char* value, size_t size) {
  set_has_phonenum();
  phonenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.phoneNum)
}
inline ::std::string* tb_user_info::mutable_phonenum() {
  set_has_phonenum();
  // @@protoc_insertion_point(field_mutable:tb_user_info.phoneNum)
  return phonenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_phonenum() {
  // @@protoc_insertion_point(field_release:tb_user_info.phoneNum)
  clear_has_phonenum();
  return phonenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_phonenum(::std::string* phonenum) {
  if (phonenum != NULL) {
    set_has_phonenum();
  } else {
    clear_has_phonenum();
  }
  phonenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenum);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.phoneNum)
}

// optional uint32 userType = 8;
inline bool tb_user_info::has_usertype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tb_user_info::set_has_usertype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tb_user_info::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tb_user_info::clear_usertype() {
  usertype_ = 0u;
  clear_has_usertype();
}
inline ::google::protobuf::uint32 tb_user_info::usertype() const {
  // @@protoc_insertion_point(field_get:tb_user_info.userType)
  return usertype_;
}
inline void tb_user_info::set_usertype(::google::protobuf::uint32 value) {
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:tb_user_info.userType)
}

// optional string registerTime = 9;
inline bool tb_user_info::has_registertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_user_info::set_has_registertime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_user_info::clear_has_registertime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_user_info::clear_registertime() {
  registertime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_registertime();
}
inline const ::std::string& tb_user_info::registertime() const {
  // @@protoc_insertion_point(field_get:tb_user_info.registerTime)
  return registertime_.GetNoArena();
}
inline void tb_user_info::set_registertime(const ::std::string& value) {
  set_has_registertime();
  registertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.registerTime)
}
#if LANG_CXX11
inline void tb_user_info::set_registertime(::std::string&& value) {
  set_has_registertime();
  registertime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.registerTime)
}
#endif
inline void tb_user_info::set_registertime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_registertime();
  registertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.registerTime)
}
inline void tb_user_info::set_registertime(const char* value, size_t size) {
  set_has_registertime();
  registertime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.registerTime)
}
inline ::std::string* tb_user_info::mutable_registertime() {
  set_has_registertime();
  // @@protoc_insertion_point(field_mutable:tb_user_info.registerTime)
  return registertime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_registertime() {
  // @@protoc_insertion_point(field_release:tb_user_info.registerTime)
  clear_has_registertime();
  return registertime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_registertime(::std::string* registertime) {
  if (registertime != NULL) {
    set_has_registertime();
  } else {
    clear_has_registertime();
  }
  registertime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registertime);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.registerTime)
}

// optional string registerAddr = 10;
inline bool tb_user_info::has_registeraddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_user_info::set_has_registeraddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_user_info::clear_has_registeraddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_user_info::clear_registeraddr() {
  registeraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_registeraddr();
}
inline const ::std::string& tb_user_info::registeraddr() const {
  // @@protoc_insertion_point(field_get:tb_user_info.registerAddr)
  return registeraddr_.GetNoArena();
}
inline void tb_user_info::set_registeraddr(const ::std::string& value) {
  set_has_registeraddr();
  registeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.registerAddr)
}
#if LANG_CXX11
inline void tb_user_info::set_registeraddr(::std::string&& value) {
  set_has_registeraddr();
  registeraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.registerAddr)
}
#endif
inline void tb_user_info::set_registeraddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_registeraddr();
  registeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.registerAddr)
}
inline void tb_user_info::set_registeraddr(const char* value, size_t size) {
  set_has_registeraddr();
  registeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.registerAddr)
}
inline ::std::string* tb_user_info::mutable_registeraddr() {
  set_has_registeraddr();
  // @@protoc_insertion_point(field_mutable:tb_user_info.registerAddr)
  return registeraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_registeraddr() {
  // @@protoc_insertion_point(field_release:tb_user_info.registerAddr)
  clear_has_registeraddr();
  return registeraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_registeraddr(::std::string* registeraddr) {
  if (registeraddr != NULL) {
    set_has_registeraddr();
  } else {
    clear_has_registeraddr();
  }
  registeraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registeraddr);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.registerAddr)
}

// optional bool openDeviceLock = 11;
inline bool tb_user_info::has_opendevicelock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tb_user_info::set_has_opendevicelock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tb_user_info::clear_has_opendevicelock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tb_user_info::clear_opendevicelock() {
  opendevicelock_ = false;
  clear_has_opendevicelock();
}
inline bool tb_user_info::opendevicelock() const {
  // @@protoc_insertion_point(field_get:tb_user_info.openDeviceLock)
  return opendevicelock_;
}
inline void tb_user_info::set_opendevicelock(bool value) {
  set_has_opendevicelock();
  opendevicelock_ = value;
  // @@protoc_insertion_point(field_set:tb_user_info.openDeviceLock)
}

// optional bool onLone = 12;
inline bool tb_user_info::has_onlone() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tb_user_info::set_has_onlone() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tb_user_info::clear_has_onlone() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tb_user_info::clear_onlone() {
  onlone_ = false;
  clear_has_onlone();
}
inline bool tb_user_info::onlone() const {
  // @@protoc_insertion_point(field_get:tb_user_info.onLone)
  return onlone_;
}
inline void tb_user_info::set_onlone(bool value) {
  set_has_onlone();
  onlone_ = value;
  // @@protoc_insertion_point(field_set:tb_user_info.onLone)
}

// optional string lastLoginOutTime = 13;
inline bool tb_user_info::has_lastloginouttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tb_user_info::set_has_lastloginouttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tb_user_info::clear_has_lastloginouttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tb_user_info::clear_lastloginouttime() {
  lastloginouttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lastloginouttime();
}
inline const ::std::string& tb_user_info::lastloginouttime() const {
  // @@protoc_insertion_point(field_get:tb_user_info.lastLoginOutTime)
  return lastloginouttime_.GetNoArena();
}
inline void tb_user_info::set_lastloginouttime(const ::std::string& value) {
  set_has_lastloginouttime();
  lastloginouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.lastLoginOutTime)
}
#if LANG_CXX11
inline void tb_user_info::set_lastloginouttime(::std::string&& value) {
  set_has_lastloginouttime();
  lastloginouttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.lastLoginOutTime)
}
#endif
inline void tb_user_info::set_lastloginouttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lastloginouttime();
  lastloginouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.lastLoginOutTime)
}
inline void tb_user_info::set_lastloginouttime(const char* value, size_t size) {
  set_has_lastloginouttime();
  lastloginouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.lastLoginOutTime)
}
inline ::std::string* tb_user_info::mutable_lastloginouttime() {
  set_has_lastloginouttime();
  // @@protoc_insertion_point(field_mutable:tb_user_info.lastLoginOutTime)
  return lastloginouttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_lastloginouttime() {
  // @@protoc_insertion_point(field_release:tb_user_info.lastLoginOutTime)
  clear_has_lastloginouttime();
  return lastloginouttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_lastloginouttime(::std::string* lastloginouttime) {
  if (lastloginouttime != NULL) {
    set_has_lastloginouttime();
  } else {
    clear_has_lastloginouttime();
  }
  lastloginouttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastloginouttime);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.lastLoginOutTime)
}

// optional string selfInviteKey = 14;
inline bool tb_user_info::has_selfinvitekey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tb_user_info::set_has_selfinvitekey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tb_user_info::clear_has_selfinvitekey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tb_user_info::clear_selfinvitekey() {
  selfinvitekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_selfinvitekey();
}
inline const ::std::string& tb_user_info::selfinvitekey() const {
  // @@protoc_insertion_point(field_get:tb_user_info.selfInviteKey)
  return selfinvitekey_.GetNoArena();
}
inline void tb_user_info::set_selfinvitekey(const ::std::string& value) {
  set_has_selfinvitekey();
  selfinvitekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tb_user_info.selfInviteKey)
}
#if LANG_CXX11
inline void tb_user_info::set_selfinvitekey(::std::string&& value) {
  set_has_selfinvitekey();
  selfinvitekey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tb_user_info.selfInviteKey)
}
#endif
inline void tb_user_info::set_selfinvitekey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_selfinvitekey();
  selfinvitekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tb_user_info.selfInviteKey)
}
inline void tb_user_info::set_selfinvitekey(const char* value, size_t size) {
  set_has_selfinvitekey();
  selfinvitekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tb_user_info.selfInviteKey)
}
inline ::std::string* tb_user_info::mutable_selfinvitekey() {
  set_has_selfinvitekey();
  // @@protoc_insertion_point(field_mutable:tb_user_info.selfInviteKey)
  return selfinvitekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_user_info::release_selfinvitekey() {
  // @@protoc_insertion_point(field_release:tb_user_info.selfInviteKey)
  clear_has_selfinvitekey();
  return selfinvitekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_user_info::set_allocated_selfinvitekey(::std::string* selfinvitekey) {
  if (selfinvitekey != NULL) {
    set_has_selfinvitekey();
  } else {
    clear_has_selfinvitekey();
  }
  selfinvitekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selfinvitekey);
  // @@protoc_insertion_point(field_set_allocated:tb_user_info.selfInviteKey)
}

// -------------------------------------------------------------------

// tb_user_info_file

// repeated .tb_user_info uinfo = 1;
inline int tb_user_info_file::uinfo_size() const {
  return uinfo_.size();
}
inline void tb_user_info_file::clear_uinfo() {
  uinfo_.Clear();
}
inline const ::tb_user_info& tb_user_info_file::uinfo(int index) const {
  // @@protoc_insertion_point(field_get:tb_user_info_file.uinfo)
  return uinfo_.Get(index);
}
inline ::tb_user_info* tb_user_info_file::mutable_uinfo(int index) {
  // @@protoc_insertion_point(field_mutable:tb_user_info_file.uinfo)
  return uinfo_.Mutable(index);
}
inline ::tb_user_info* tb_user_info_file::add_uinfo() {
  // @@protoc_insertion_point(field_add:tb_user_info_file.uinfo)
  return uinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tb_user_info >*
tb_user_info_file::mutable_uinfo() {
  // @@protoc_insertion_point(field_mutable_list:tb_user_info_file.uinfo)
  return &uinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tb_user_info >&
tb_user_info_file::uinfo() const {
  // @@protoc_insertion_point(field_list:tb_user_info_file.uinfo)
  return uinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
